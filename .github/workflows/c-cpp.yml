name: Build And Package

on:
  push:
    branches: [ master ]
    tags: [ v* ]
  pull_request:
    branches: [ master ]

jobs:
  # Build the project and ensure it compiles
  build-linux:

    runs-on: ubuntu-18.04
    container:
      image: debian:bookworm
    steps:
    - uses: actions/checkout@v2
    - name: 'prepare runner'
      run: |
        dpkg --add-architecture armhf
        dpkg --add-architecture armel
        dpkg --add-architecture arm64
        apt update
        apt install -y libcurl4-openssl-dev libgtk-4-dev libssh-dev meson build-essential debhelper ninja-build
        apt install -y libgtk-4-dev:armhf libcurl4-openssl-dev:armhf libssh-dev:armhf crossbuild-essential-armhf
        apt install -y libgtk-4-dev:armel libcurl4-openssl-dev:armel libssh-dev:armel crossbuild-essential-armel
        apt install -y libgtk-4-dev:arm64 libcurl4-openssl-dev:arm64 libssh-dev:arm64 crossbuild-essential-arm64
    - name: 'build and package native'
      run: dpkg-buildpackage
    - name: 'build and package armhf'
      run: CONFIG_SITE=/etc/dpkg-cross/cross-config.armhf DCMAKE_TOOLCHAIN_FILE=armhf.ini dpkg-buildpackage -aarmhf -Pcross
    - name: 'build and package arm64'
      run: CONFIG_SITE=/etc/dpkg-cross/cross-config.arm64 DCMAKE_TOOLCHAIN_FILE=arm64.ini dpkg-buildpackage -aarm64 -Pcross
    - name: 'build and package armel'
      run: CONFIG_SITE=/etc/dpkg-cross/cross-config.armel DCMAKE_TOOLCHAIN_FILE=armel.ini dpkg-buildpackage -aarmel -Pcross
    - name: 'move debs back into home'
      run: |
        ls ..
        mv ../penguintuner*.deb . 
    # Once the project is built, upload the deb package   
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: PenguinTuner_Packages
        path: penguintuner*.deb
  
  build-macos:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - name: 'Prepare Runner'
        run: |
          brew install pkgconfig cmake curl libssh gtk+4
      - name: 'build'
        run: ./build.sh
      - name: Create upload folder
        run: |
          mkdir macos-bins
          cp build/penguintuner macos-bins/
          cp backend/lib/macos/libpenguinbackend.dylib macos-bins/
      - name: 'upload'
        uses: actions/upload-artifact@v2
        with:
          name: Mac Binaries
          path: macos-bins/*

  build-windows:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            arch-name: x86_32
            triplet: x86-windows
          - os: windows-2019
            arch-name: x86_64
            triplet: x64-windows
    
    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v10
        id: runvcpkg
        with:
          vcpkgJsonGlob: 'vcpkg.json'
      - name: Run CMake to build PenguinTuner.
        uses: lukka/run-cmake@v10
        id: runcmake
        with:
          configurePreset: 'msbuild-vcpkg'
          buildPreset: 'msbuild-vcpkg'
      - name: 'upload'
        uses: actions/upload-artifact@v2
        with:
          name: Windows Backend ${{ matrix.arch-name }}
          path: builds/msbuild-vcpkg/Debug/*
  
  verify-install:
    runs-on: ubuntu-18.04
    container:
      image: debian:experimental
    needs: [build-linux]
    steps:
      - name: Download previous job artifact
        uses: actions/download-artifact@v2
        with:
          name: PenguinTuner_Packages
      - name: Install necessary dependencies to run the test
        run: |
          sudo apt update
          sudo apt install xvfb
      - name: Install the package on the clean container
        # Ensure we install the amd64 package, not armhf
        run: sudo apt install -f ./penguintuner*amd64.deb
      - name: Run the app for 10 seconds to ensure everything it needs has been installed
        run: |
          xvfb-run -a penguintuner &
          CHILD_PID=$!
          sleep 10
          kill $CHILD_PID

  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    # Release the version if it includes a tag that starts with "v"
    if: success() && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v2
        with:
          ref: gh-pages
      - name: Import GPG key to sign package release
        uses: crazy-max/ghaction-import-gpg@4c65c687307523ba52326ed829da04bc892ce413
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
        
      - name: Download previous job artifact
        uses: actions/download-artifact@v2
        with:
          name: PenguinTuner_Packages
      
      - name: Create Pacakges & Packages.gz files
        run: |
          dpkg-scanpackages --multiversion . > Packages
          gzip -k -f Packages
        
      - name: Create Release, Release.gpg, and InRelease files
        run: |
          apt-ftparchive release . > Release
          gpg --default-key "coryness@tytan.rocks" -abs -o - Release > Release.gpg
          gpg --default-key "coryness@tytan.rocks" --clearsign -o - Release > InRelease
        
      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Update GH-Pages with latest release"
          
      - name: Push to gh-pages branch
        uses: ad-m/github-push-action@40bf560936a8022e68a3c00e7d2abefaf01305a6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          
      - name: Create a new Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }} Release
          draft: true
