name: Build And Package

on:
  push:
    branches: [ master ]
    tags: [ v* ]
  pull_request:
    branches: [ master ]

jobs:
  # Build the project and ensure it compiles
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: configure
      run: ./configure.sh
    - name: 'install cross packages'
      uses: ryankurte/action-apt@v0.1
      with:
        arch: armhf
        packages: "libgtk-3-dev:armhf libcurl4-openssl-dev:armhf crossbuild-essential-armhf"
    - name: 'build and package native'
      run: dpkg-buildpackage -rsudo
    - name: 'build and package armhf'
      run: CONFIG_SITE=/etc/dpkg-cross/cross-config.armhf DH_MESON_CROSS_FILE=armhf.ini dpkg-buildpackage -aarmhf -r'sudo --preserve-env=DEB_HOST_ARCH' -Pcross
  
    # Once the project is built, upload the deb package   
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: PenguinTuner_Packages
        path: ../penguintuner*.deb
  
  verify-install:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download previous job artifact
        uses: actions/download-artifact@v2
        with:
          name: PenguinTuner
      - name: Install necessary dependencies to run the test
        run: sudo apt install xvfb
      - name: Install the package on the clean container
        # Ensure we install the amd64 package, not armhf
        run: sudo apt install ./penguintuner*amd64.deb
      - name: Run the app for 10 seconds to ensure everything it needs has been installed
        run: |
          xvfb-run -a penguintuner &
          CHILD_PID=$!
          sleep 10
          kill $CHILD_PID

  release:
    runs-on: ubuntu-latest
    needs: [build]
    # Release the version if it includes a tag that starts with "v"
    if: success() && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v2
        with:
          ref: gh-pages
      - name: Import GPG key to sign package release
        uses: crazy-max/ghaction-import-gpg@4c65c687307523ba52326ed829da04bc892ce413
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
        
      - name: Download previous job artifact
        uses: actions/download-artifact@v2
        with:
          name: PenguinTuner
      
      - name: Create Pacakges & Packages.gz files
        run: |
          dpkg-scanpackages --multiversion . > Packages
          gzip -k -f Packages
        
      - name: Create Release, Release.gpg, and InRelease files
        run: |
          apt-ftparchive release . > Release
          gpg --default-key "coryness@tytan.rocks" -abs -o - Release > Release.gpg
          gpg --default-key "coryness@tytan.rocks" --clearsign -o - Release > InRelease
        
      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Update GH-Pages with latest release"
          
      - name: Push to gh-pages branch
        uses: ad-m/github-push-action@40bf560936a8022e68a3c00e7d2abefaf01305a6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages
          
      - name: Create a new Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }} Release
          draft: true
